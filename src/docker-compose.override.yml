version: "3.3"
services:

  proxy:
    ports:
      - "80:80"
      - "8090:8080"
    # Duplicate the command from docker-compose.yml to add --api.insecure=true
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80

  db:
    ports:
      - "5432:5432"

  pgadmin:
    ports:
      - "5050:5050"

  queue:
    ports:
      - "5671:5671"
      - "5672:5672"
      - "15672:15672"
      - "15671:15671"

  flower:
    ports:
      - "5555:5555"

  backend:
    ports:
      - "8888:8888"
    volumes:
      - ./backend/:/app
    environment:
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    command: /start-reload.sh

  celeryworker:
    volumes:
      - ./backend/:/app
    environment:
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}

  frontend:
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: dev
    labels:
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`old-frontend.localhost.tiangolo.com`)

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
